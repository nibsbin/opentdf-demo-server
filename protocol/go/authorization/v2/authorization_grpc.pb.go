// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: authorization/v2/authorization.proto

package authorizationv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthorizationService_GetDecision_FullMethodName             = "/authorization.v2.AuthorizationService/GetDecision"
	AuthorizationService_BulkGetDecisions_FullMethodName        = "/authorization.v2.AuthorizationService/BulkGetDecisions"
	AuthorizationService_BulkGetDecisionsByToken_FullMethodName = "/authorization.v2.AuthorizationService/BulkGetDecisionsByToken"
	AuthorizationService_GetDecisionByToken_FullMethodName      = "/authorization.v2.AuthorizationService/GetDecisionByToken"
	AuthorizationService_GetEntitlements_FullMethodName         = "/authorization.v2.AuthorizationService/GetEntitlements"
)

// AuthorizationServiceClient is the client API for AuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorizationServiceClient interface {
	GetDecision(ctx context.Context, in *GetDecisionRequest, opts ...grpc.CallOption) (*GetDecisionResponse, error)
	BulkGetDecisions(ctx context.Context, in *BulkGetDecisionsRequest, opts ...grpc.CallOption) (*BulkGetDecisionsResponse, error)
	BulkGetDecisionsByToken(ctx context.Context, in *BulkGetDecisionsByTokenRequest, opts ...grpc.CallOption) (*BulkGetDecisionsByTokenResponse, error)
	GetDecisionByToken(ctx context.Context, in *GetDecisionByTokenRequest, opts ...grpc.CallOption) (*GetDecisionByTokenResponse, error)
	GetEntitlements(ctx context.Context, in *GetEntitlementsRequest, opts ...grpc.CallOption) (*GetEntitlementsResponse, error)
}

type authorizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorizationServiceClient(cc grpc.ClientConnInterface) AuthorizationServiceClient {
	return &authorizationServiceClient{cc}
}

func (c *authorizationServiceClient) GetDecision(ctx context.Context, in *GetDecisionRequest, opts ...grpc.CallOption) (*GetDecisionResponse, error) {
	out := new(GetDecisionResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_GetDecision_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) BulkGetDecisions(ctx context.Context, in *BulkGetDecisionsRequest, opts ...grpc.CallOption) (*BulkGetDecisionsResponse, error) {
	out := new(BulkGetDecisionsResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_BulkGetDecisions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) BulkGetDecisionsByToken(ctx context.Context, in *BulkGetDecisionsByTokenRequest, opts ...grpc.CallOption) (*BulkGetDecisionsByTokenResponse, error) {
	out := new(BulkGetDecisionsByTokenResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_BulkGetDecisionsByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetDecisionByToken(ctx context.Context, in *GetDecisionByTokenRequest, opts ...grpc.CallOption) (*GetDecisionByTokenResponse, error) {
	out := new(GetDecisionByTokenResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_GetDecisionByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationServiceClient) GetEntitlements(ctx context.Context, in *GetEntitlementsRequest, opts ...grpc.CallOption) (*GetEntitlementsResponse, error) {
	out := new(GetEntitlementsResponse)
	err := c.cc.Invoke(ctx, AuthorizationService_GetEntitlements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServiceServer is the server API for AuthorizationService service.
// All implementations must embed UnimplementedAuthorizationServiceServer
// for forward compatibility
type AuthorizationServiceServer interface {
	GetDecision(context.Context, *GetDecisionRequest) (*GetDecisionResponse, error)
	BulkGetDecisions(context.Context, *BulkGetDecisionsRequest) (*BulkGetDecisionsResponse, error)
	BulkGetDecisionsByToken(context.Context, *BulkGetDecisionsByTokenRequest) (*BulkGetDecisionsByTokenResponse, error)
	GetDecisionByToken(context.Context, *GetDecisionByTokenRequest) (*GetDecisionByTokenResponse, error)
	GetEntitlements(context.Context, *GetEntitlementsRequest) (*GetEntitlementsResponse, error)
	mustEmbedUnimplementedAuthorizationServiceServer()
}

// UnimplementedAuthorizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorizationServiceServer struct {
}

func (UnimplementedAuthorizationServiceServer) GetDecision(context.Context, *GetDecisionRequest) (*GetDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecision not implemented")
}
func (UnimplementedAuthorizationServiceServer) BulkGetDecisions(context.Context, *BulkGetDecisionsRequest) (*BulkGetDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkGetDecisions not implemented")
}
func (UnimplementedAuthorizationServiceServer) BulkGetDecisionsByToken(context.Context, *BulkGetDecisionsByTokenRequest) (*BulkGetDecisionsByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkGetDecisionsByToken not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetDecisionByToken(context.Context, *GetDecisionByTokenRequest) (*GetDecisionByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecisionByToken not implemented")
}
func (UnimplementedAuthorizationServiceServer) GetEntitlements(context.Context, *GetEntitlementsRequest) (*GetEntitlementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntitlements not implemented")
}
func (UnimplementedAuthorizationServiceServer) mustEmbedUnimplementedAuthorizationServiceServer() {}

// UnsafeAuthorizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorizationServiceServer will
// result in compilation errors.
type UnsafeAuthorizationServiceServer interface {
	mustEmbedUnimplementedAuthorizationServiceServer()
}

func RegisterAuthorizationServiceServer(s grpc.ServiceRegistrar, srv AuthorizationServiceServer) {
	s.RegisterService(&AuthorizationService_ServiceDesc, srv)
}

func _AuthorizationService_GetDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetDecision(ctx, req.(*GetDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_BulkGetDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGetDecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).BulkGetDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_BulkGetDecisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).BulkGetDecisions(ctx, req.(*BulkGetDecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_BulkGetDecisionsByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkGetDecisionsByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).BulkGetDecisionsByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_BulkGetDecisionsByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).BulkGetDecisionsByToken(ctx, req.(*BulkGetDecisionsByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetDecisionByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetDecisionByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetDecisionByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetDecisionByToken(ctx, req.(*GetDecisionByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorizationService_GetEntitlements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntitlementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServiceServer).GetEntitlements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorizationService_GetEntitlements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServiceServer).GetEntitlements(ctx, req.(*GetEntitlementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorizationService_ServiceDesc is the grpc.ServiceDesc for AuthorizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.v2.AuthorizationService",
	HandlerType: (*AuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDecision",
			Handler:    _AuthorizationService_GetDecision_Handler,
		},
		{
			MethodName: "BulkGetDecisions",
			Handler:    _AuthorizationService_BulkGetDecisions_Handler,
		},
		{
			MethodName: "BulkGetDecisionsByToken",
			Handler:    _AuthorizationService_BulkGetDecisionsByToken_Handler,
		},
		{
			MethodName: "GetDecisionByToken",
			Handler:    _AuthorizationService_GetDecisionByToken_Handler,
		},
		{
			MethodName: "GetEntitlements",
			Handler:    _AuthorizationService_GetEntitlements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization/v2/authorization.proto",
}
