//*
// Flag evaluation API
//
// This proto forms the basis of a flag-evaluation API.
// It supports single and bulk evaluation RPCs, and flags of various types, as well as establishing a stream for getting notifications about changes in a flag definition.
// It supports the inclusion of a "context" with each evaluation, which may contain arbitrary attributes relevant to flag evaluation.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: featureflag/featureflag.proto

package featureflag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeatureFlagService_ResolveAll_FullMethodName     = "/featureflag.FeatureFlagService/ResolveAll"
	FeatureFlagService_ResolveBoolean_FullMethodName = "/featureflag.FeatureFlagService/ResolveBoolean"
	FeatureFlagService_ResolveString_FullMethodName  = "/featureflag.FeatureFlagService/ResolveString"
	FeatureFlagService_ResolveFloat_FullMethodName   = "/featureflag.FeatureFlagService/ResolveFloat"
	FeatureFlagService_ResolveInt_FullMethodName     = "/featureflag.FeatureFlagService/ResolveInt"
	FeatureFlagService_ResolveObject_FullMethodName  = "/featureflag.FeatureFlagService/ResolveObject"
)

// FeatureFlagServiceClient is the client API for FeatureFlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureFlagServiceClient interface {
	ResolveAll(ctx context.Context, in *ResolveAllRequest, opts ...grpc.CallOption) (*ResolveAllResponse, error)
	ResolveBoolean(ctx context.Context, in *ResolveBooleanRequest, opts ...grpc.CallOption) (*ResolveBooleanResponse, error)
	ResolveString(ctx context.Context, in *ResolveStringRequest, opts ...grpc.CallOption) (*ResolveStringResponse, error)
	ResolveFloat(ctx context.Context, in *ResolveFloatRequest, opts ...grpc.CallOption) (*ResolveFloatResponse, error)
	ResolveInt(ctx context.Context, in *ResolveIntRequest, opts ...grpc.CallOption) (*ResolveIntResponse, error)
	ResolveObject(ctx context.Context, in *ResolveObjectRequest, opts ...grpc.CallOption) (*ResolveObjectResponse, error)
}

type featureFlagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureFlagServiceClient(cc grpc.ClientConnInterface) FeatureFlagServiceClient {
	return &featureFlagServiceClient{cc}
}

func (c *featureFlagServiceClient) ResolveAll(ctx context.Context, in *ResolveAllRequest, opts ...grpc.CallOption) (*ResolveAllResponse, error) {
	out := new(ResolveAllResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_ResolveAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) ResolveBoolean(ctx context.Context, in *ResolveBooleanRequest, opts ...grpc.CallOption) (*ResolveBooleanResponse, error) {
	out := new(ResolveBooleanResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_ResolveBoolean_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) ResolveString(ctx context.Context, in *ResolveStringRequest, opts ...grpc.CallOption) (*ResolveStringResponse, error) {
	out := new(ResolveStringResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_ResolveString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) ResolveFloat(ctx context.Context, in *ResolveFloatRequest, opts ...grpc.CallOption) (*ResolveFloatResponse, error) {
	out := new(ResolveFloatResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_ResolveFloat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) ResolveInt(ctx context.Context, in *ResolveIntRequest, opts ...grpc.CallOption) (*ResolveIntResponse, error) {
	out := new(ResolveIntResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_ResolveInt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagServiceClient) ResolveObject(ctx context.Context, in *ResolveObjectRequest, opts ...grpc.CallOption) (*ResolveObjectResponse, error) {
	out := new(ResolveObjectResponse)
	err := c.cc.Invoke(ctx, FeatureFlagService_ResolveObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagServiceServer is the server API for FeatureFlagService service.
// All implementations must embed UnimplementedFeatureFlagServiceServer
// for forward compatibility
type FeatureFlagServiceServer interface {
	ResolveAll(context.Context, *ResolveAllRequest) (*ResolveAllResponse, error)
	ResolveBoolean(context.Context, *ResolveBooleanRequest) (*ResolveBooleanResponse, error)
	ResolveString(context.Context, *ResolveStringRequest) (*ResolveStringResponse, error)
	ResolveFloat(context.Context, *ResolveFloatRequest) (*ResolveFloatResponse, error)
	ResolveInt(context.Context, *ResolveIntRequest) (*ResolveIntResponse, error)
	ResolveObject(context.Context, *ResolveObjectRequest) (*ResolveObjectResponse, error)
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

// UnimplementedFeatureFlagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureFlagServiceServer struct {
}

func (UnimplementedFeatureFlagServiceServer) ResolveAll(context.Context, *ResolveAllRequest) (*ResolveAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveAll not implemented")
}
func (UnimplementedFeatureFlagServiceServer) ResolveBoolean(context.Context, *ResolveBooleanRequest) (*ResolveBooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveBoolean not implemented")
}
func (UnimplementedFeatureFlagServiceServer) ResolveString(context.Context, *ResolveStringRequest) (*ResolveStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveString not implemented")
}
func (UnimplementedFeatureFlagServiceServer) ResolveFloat(context.Context, *ResolveFloatRequest) (*ResolveFloatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveFloat not implemented")
}
func (UnimplementedFeatureFlagServiceServer) ResolveInt(context.Context, *ResolveIntRequest) (*ResolveIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveInt not implemented")
}
func (UnimplementedFeatureFlagServiceServer) ResolveObject(context.Context, *ResolveObjectRequest) (*ResolveObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveObject not implemented")
}
func (UnimplementedFeatureFlagServiceServer) mustEmbedUnimplementedFeatureFlagServiceServer() {}

// UnsafeFeatureFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureFlagServiceServer will
// result in compilation errors.
type UnsafeFeatureFlagServiceServer interface {
	mustEmbedUnimplementedFeatureFlagServiceServer()
}

func RegisterFeatureFlagServiceServer(s grpc.ServiceRegistrar, srv FeatureFlagServiceServer) {
	s.RegisterService(&FeatureFlagService_ServiceDesc, srv)
}

func _FeatureFlagService_ResolveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).ResolveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_ResolveAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).ResolveAll(ctx, req.(*ResolveAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_ResolveBoolean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveBooleanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).ResolveBoolean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_ResolveBoolean_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).ResolveBoolean(ctx, req.(*ResolveBooleanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_ResolveString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).ResolveString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_ResolveString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).ResolveString(ctx, req.(*ResolveStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_ResolveFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveFloatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).ResolveFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_ResolveFloat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).ResolveFloat(ctx, req.(*ResolveFloatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_ResolveInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).ResolveInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_ResolveInt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).ResolveInt(ctx, req.(*ResolveIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagService_ResolveObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagServiceServer).ResolveObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureFlagService_ResolveObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagServiceServer).ResolveObject(ctx, req.(*ResolveObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureFlagService_ServiceDesc is the grpc.ServiceDesc for FeatureFlagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureFlagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "featureflag.FeatureFlagService",
	HandlerType: (*FeatureFlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveAll",
			Handler:    _FeatureFlagService_ResolveAll_Handler,
		},
		{
			MethodName: "ResolveBoolean",
			Handler:    _FeatureFlagService_ResolveBoolean_Handler,
		},
		{
			MethodName: "ResolveString",
			Handler:    _FeatureFlagService_ResolveString_Handler,
		},
		{
			MethodName: "ResolveFloat",
			Handler:    _FeatureFlagService_ResolveFloat_Handler,
		},
		{
			MethodName: "ResolveInt",
			Handler:    _FeatureFlagService_ResolveInt_Handler,
		},
		{
			MethodName: "ResolveObject",
			Handler:    _FeatureFlagService_ResolveObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "featureflag/featureflag.proto",
}
