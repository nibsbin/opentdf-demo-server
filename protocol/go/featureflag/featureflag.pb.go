//*
// Flag evaluation API
//
// This proto forms the basis of a flag-evaluation API.
// It supports single and bulk evaluation RPCs, and flags of various types, as well as establishing a stream for getting notifications about changes in a flag definition.
// It supports the inclusion of a "context" with each evaluation, which may contain arbitrary attributes relevant to flag evaluation.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: featureflag/featureflag.proto

package featureflag

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request body for bulk flag evaluation, used by the ResolveAll rpc.
type ResolveAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object structure describing the EvaluationContext used in the flag evaluation, see https://openfeature.dev/docs/reference/concepts/evaluation-context
	Context *structpb.Struct `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ResolveAllRequest) Reset() {
	*x = ResolveAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAllRequest) ProtoMessage() {}

func (x *ResolveAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAllRequest.ProtoReflect.Descriptor instead.
func (*ResolveAllRequest) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{0}
}

func (x *ResolveAllRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// Response body for bulk flag evaluation, used by the ResolveAll rpc.
type ResolveAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Object structure describing the evaluated flags for the provided context.
	Flags map[string]*AnyFlag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Metadata for the bulk evaluation
	Metadata *structpb.Struct `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResolveAllResponse) Reset() {
	*x = ResolveAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAllResponse) ProtoMessage() {}

func (x *ResolveAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAllResponse.ProtoReflect.Descriptor instead.
func (*ResolveAllResponse) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{1}
}

func (x *ResolveAllResponse) GetFlags() map[string]*AnyFlag {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ResolveAllResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A variant type flag response.
type AnyFlag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reason for the given return value, see https://openfeature.dev/docs/specification/types#resolution-details
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	// The variant name of the returned flag value.
	Variant string `protobuf:"bytes,2,opt,name=variant,proto3" json:"variant,omitempty"`
	// The response value of the boolean flag evaluation, will be unset in the case of error.
	//
	// Types that are assignable to Value:
	//
	//	*AnyFlag_BoolValue
	//	*AnyFlag_StringValue
	//	*AnyFlag_DoubleValue
	//	*AnyFlag_ObjectValue
	Value isAnyFlag_Value `protobuf_oneof:"value"`
	// Metadata for this evaluation
	Metadata *structpb.Struct `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AnyFlag) Reset() {
	*x = AnyFlag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyFlag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyFlag) ProtoMessage() {}

func (x *AnyFlag) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyFlag.ProtoReflect.Descriptor instead.
func (*AnyFlag) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{2}
}

func (x *AnyFlag) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AnyFlag) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (m *AnyFlag) GetValue() isAnyFlag_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AnyFlag) GetBoolValue() bool {
	if x, ok := x.GetValue().(*AnyFlag_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *AnyFlag) GetStringValue() string {
	if x, ok := x.GetValue().(*AnyFlag_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *AnyFlag) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*AnyFlag_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *AnyFlag) GetObjectValue() *structpb.Struct {
	if x, ok := x.GetValue().(*AnyFlag_ObjectValue); ok {
		return x.ObjectValue
	}
	return nil
}

func (x *AnyFlag) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isAnyFlag_Value interface {
	isAnyFlag_Value()
}

type AnyFlag_BoolValue struct {
	BoolValue bool `protobuf:"varint,3,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyFlag_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnyFlag_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnyFlag_ObjectValue struct {
	ObjectValue *structpb.Struct `protobuf:"bytes,6,opt,name=object_value,json=objectValue,proto3,oneof"`
}

func (*AnyFlag_BoolValue) isAnyFlag_Value() {}

func (*AnyFlag_StringValue) isAnyFlag_Value() {}

func (*AnyFlag_DoubleValue) isAnyFlag_Value() {}

func (*AnyFlag_ObjectValue) isAnyFlag_Value() {}

// Request body for boolean flag evaluation, used by the ResolveBoolean rpc.
type ResolveBooleanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag key of the requested flag.
	FlagKey string `protobuf:"bytes,1,opt,name=flag_key,json=flagKey,proto3" json:"flag_key,omitempty"`
	// Object structure describing the EvaluationContext used in the flag evaluation, see https://openfeature.dev/docs/reference/concepts/evaluation-context
	Context *structpb.Struct `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ResolveBooleanRequest) Reset() {
	*x = ResolveBooleanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveBooleanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveBooleanRequest) ProtoMessage() {}

func (x *ResolveBooleanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveBooleanRequest.ProtoReflect.Descriptor instead.
func (*ResolveBooleanRequest) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{3}
}

func (x *ResolveBooleanRequest) GetFlagKey() string {
	if x != nil {
		return x.FlagKey
	}
	return ""
}

func (x *ResolveBooleanRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// Response body for boolean flag evaluation. used by the ResolveBoolean rpc.
type ResolveBooleanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response value of the boolean flag evaluation, will be unset in the case of error.
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The reason for the given return value, see https://openfeature.dev/docs/specification/types#resolution-details
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The variant name of the returned flag value.
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// Metadata for this evaluation
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResolveBooleanResponse) Reset() {
	*x = ResolveBooleanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveBooleanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveBooleanResponse) ProtoMessage() {}

func (x *ResolveBooleanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveBooleanResponse.ProtoReflect.Descriptor instead.
func (*ResolveBooleanResponse) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{4}
}

func (x *ResolveBooleanResponse) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *ResolveBooleanResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResolveBooleanResponse) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResolveBooleanResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request body for string flag evaluation, used by the ResolveString rpc.
type ResolveStringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag key of the requested flag.
	FlagKey string `protobuf:"bytes,1,opt,name=flag_key,json=flagKey,proto3" json:"flag_key,omitempty"`
	// Object structure describing the EvaluationContext used in the flag evaluation, see https://openfeature.dev/docs/reference/concepts/evaluation-context
	Context *structpb.Struct `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ResolveStringRequest) Reset() {
	*x = ResolveStringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveStringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveStringRequest) ProtoMessage() {}

func (x *ResolveStringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveStringRequest.ProtoReflect.Descriptor instead.
func (*ResolveStringRequest) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{5}
}

func (x *ResolveStringRequest) GetFlagKey() string {
	if x != nil {
		return x.FlagKey
	}
	return ""
}

func (x *ResolveStringRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// Response body for string flag evaluation. used by the ResolveString rpc.
type ResolveStringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response value of the string flag evaluation, will be unset in the case of error.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The reason for the given return value, see https://openfeature.dev/docs/specification/types#resolution-details
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The variant name of the returned flag value.
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// Metadata for this evaluation
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResolveStringResponse) Reset() {
	*x = ResolveStringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveStringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveStringResponse) ProtoMessage() {}

func (x *ResolveStringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveStringResponse.ProtoReflect.Descriptor instead.
func (*ResolveStringResponse) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{6}
}

func (x *ResolveStringResponse) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ResolveStringResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResolveStringResponse) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResolveStringResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request body for float flag evaluation, used by the ResolveFloat rpc.
type ResolveFloatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag key of the requested flag.
	FlagKey string `protobuf:"bytes,1,opt,name=flag_key,json=flagKey,proto3" json:"flag_key,omitempty"`
	// Object structure describing the EvaluationContext used in the flag evaluation, see https://openfeature.dev/docs/reference/concepts/evaluation-context
	Context *structpb.Struct `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ResolveFloatRequest) Reset() {
	*x = ResolveFloatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveFloatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFloatRequest) ProtoMessage() {}

func (x *ResolveFloatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFloatRequest.ProtoReflect.Descriptor instead.
func (*ResolveFloatRequest) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{7}
}

func (x *ResolveFloatRequest) GetFlagKey() string {
	if x != nil {
		return x.FlagKey
	}
	return ""
}

func (x *ResolveFloatRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// Response body for float flag evaluation. used by the ResolveFloat rpc.
type ResolveFloatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response value of the float flag evaluation, will be empty in the case of error.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The reason for the given return value, see https://openfeature.dev/docs/specification/types#resolution-details
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The variant name of the returned flag value.
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// Metadata for this evaluation
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResolveFloatResponse) Reset() {
	*x = ResolveFloatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveFloatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveFloatResponse) ProtoMessage() {}

func (x *ResolveFloatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveFloatResponse.ProtoReflect.Descriptor instead.
func (*ResolveFloatResponse) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{8}
}

func (x *ResolveFloatResponse) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ResolveFloatResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResolveFloatResponse) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResolveFloatResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request body for int flag evaluation, used by the ResolveInt rpc.
type ResolveIntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag key of the requested flag.
	FlagKey string `protobuf:"bytes,1,opt,name=flag_key,json=flagKey,proto3" json:"flag_key,omitempty"`
	// Object structure describing the EvaluationContext used in the flag evaluation, see https://openfeature.dev/docs/reference/concepts/evaluation-context
	Context *structpb.Struct `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ResolveIntRequest) Reset() {
	*x = ResolveIntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveIntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveIntRequest) ProtoMessage() {}

func (x *ResolveIntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveIntRequest.ProtoReflect.Descriptor instead.
func (*ResolveIntRequest) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{9}
}

func (x *ResolveIntRequest) GetFlagKey() string {
	if x != nil {
		return x.FlagKey
	}
	return ""
}

func (x *ResolveIntRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// Response body for int flag evaluation. used by the ResolveInt rpc.
type ResolveIntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response value of the int flag evaluation, will be unset in the case of error.
	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// The reason for the given return value, see https://openfeature.dev/docs/specification/types#resolution-details
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The variant name of the returned flag value.
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// Metadata for this evaluation
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResolveIntResponse) Reset() {
	*x = ResolveIntResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveIntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveIntResponse) ProtoMessage() {}

func (x *ResolveIntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveIntResponse.ProtoReflect.Descriptor instead.
func (*ResolveIntResponse) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{10}
}

func (x *ResolveIntResponse) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ResolveIntResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResolveIntResponse) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResolveIntResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request body for object flag evaluation, used by the ResolveObject rpc.
type ResolveObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag key of the requested flag.
	FlagKey string `protobuf:"bytes,1,opt,name=flag_key,json=flagKey,proto3" json:"flag_key,omitempty"`
	// Object structure describing the EvaluationContext used in the flag evaluation, see https://openfeature.dev/docs/reference/concepts/evaluation-context
	Context *structpb.Struct `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ResolveObjectRequest) Reset() {
	*x = ResolveObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveObjectRequest) ProtoMessage() {}

func (x *ResolveObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveObjectRequest.ProtoReflect.Descriptor instead.
func (*ResolveObjectRequest) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{11}
}

func (x *ResolveObjectRequest) GetFlagKey() string {
	if x != nil {
		return x.FlagKey
	}
	return ""
}

func (x *ResolveObjectRequest) GetContext() *structpb.Struct {
	if x != nil {
		return x.Context
	}
	return nil
}

// Response body for object flag evaluation. used by the ResolveObject rpc.
type ResolveObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The response value of the object flag evaluation, will be unset in the case of error.
	//
	// NOTE: This structure will need to be decoded from google/protobuf/struct.proto before it is returned to the SDK
	Value *structpb.Struct `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The reason for the given return value, see https://openfeature.dev/docs/specification/types#resolution-details
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// The variant name of the returned flag value.
	Variant string `protobuf:"bytes,3,opt,name=variant,proto3" json:"variant,omitempty"`
	// Metadata for this evaluation
	Metadata *structpb.Struct `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ResolveObjectResponse) Reset() {
	*x = ResolveObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveObjectResponse) ProtoMessage() {}

func (x *ResolveObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveObjectResponse.ProtoReflect.Descriptor instead.
func (*ResolveObjectResponse) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{12}
}

func (x *ResolveObjectResponse) GetValue() *structpb.Struct {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ResolveObjectResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ResolveObjectResponse) GetVariant() string {
	if x != nil {
		return x.Variant
	}
	return ""
}

func (x *ResolveObjectResponse) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response body for the EventStream stream response
type EventStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String key indicating the type of event that is being received, for example, provider_ready or configuration_change
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Object structure for use when sending relevant metadata to provide context to the event.
	// Can be left unset when it is not required.
	Data *structpb.Struct `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *EventStreamResponse) Reset() {
	*x = EventStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_featureflag_featureflag_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStreamResponse) ProtoMessage() {}

func (x *EventStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_featureflag_featureflag_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStreamResponse.ProtoReflect.Descriptor instead.
func (*EventStreamResponse) Descriptor() ([]byte, []int) {
	return file_featureflag_featureflag_proto_rawDescGZIP(), []int{13}
}

func (x *EventStreamResponse) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventStreamResponse) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_featureflag_featureflag_proto protoreflect.FileDescriptor

var file_featureflag_featureflag_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x11, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x4e, 0x0a, 0x0a, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x41, 0x6e,
	0x79, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xa2, 0x02, 0x0a, 0x07, 0x41, 0x6e, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x65, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x95, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x6c, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x63, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67,
	0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x61, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x91, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x6c, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x56, 0x0a, 0x13, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x9e, 0x04, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x22, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x20, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66,
	0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0xa4, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x42, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66,
	0x6c, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x64, 0x66, 0x2f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0xa2,
	0x02, 0x03, 0x46, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66,
	0x6c, 0x61, 0x67, 0xca, 0x02, 0x0b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61,
	0x67, 0xe2, 0x02, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x66, 0x6c, 0x61, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_featureflag_featureflag_proto_rawDescOnce sync.Once
	file_featureflag_featureflag_proto_rawDescData = file_featureflag_featureflag_proto_rawDesc
)

func file_featureflag_featureflag_proto_rawDescGZIP() []byte {
	file_featureflag_featureflag_proto_rawDescOnce.Do(func() {
		file_featureflag_featureflag_proto_rawDescData = protoimpl.X.CompressGZIP(file_featureflag_featureflag_proto_rawDescData)
	})
	return file_featureflag_featureflag_proto_rawDescData
}

var file_featureflag_featureflag_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_featureflag_featureflag_proto_goTypes = []interface{}{
	(*ResolveAllRequest)(nil),      // 0: featureflag.ResolveAllRequest
	(*ResolveAllResponse)(nil),     // 1: featureflag.ResolveAllResponse
	(*AnyFlag)(nil),                // 2: featureflag.AnyFlag
	(*ResolveBooleanRequest)(nil),  // 3: featureflag.ResolveBooleanRequest
	(*ResolveBooleanResponse)(nil), // 4: featureflag.ResolveBooleanResponse
	(*ResolveStringRequest)(nil),   // 5: featureflag.ResolveStringRequest
	(*ResolveStringResponse)(nil),  // 6: featureflag.ResolveStringResponse
	(*ResolveFloatRequest)(nil),    // 7: featureflag.ResolveFloatRequest
	(*ResolveFloatResponse)(nil),   // 8: featureflag.ResolveFloatResponse
	(*ResolveIntRequest)(nil),      // 9: featureflag.ResolveIntRequest
	(*ResolveIntResponse)(nil),     // 10: featureflag.ResolveIntResponse
	(*ResolveObjectRequest)(nil),   // 11: featureflag.ResolveObjectRequest
	(*ResolveObjectResponse)(nil),  // 12: featureflag.ResolveObjectResponse
	(*EventStreamResponse)(nil),    // 13: featureflag.EventStreamResponse
	nil,                            // 14: featureflag.ResolveAllResponse.FlagsEntry
	(*structpb.Struct)(nil),        // 15: google.protobuf.Struct
}
var file_featureflag_featureflag_proto_depIdxs = []int32{
	15, // 0: featureflag.ResolveAllRequest.context:type_name -> google.protobuf.Struct
	14, // 1: featureflag.ResolveAllResponse.flags:type_name -> featureflag.ResolveAllResponse.FlagsEntry
	15, // 2: featureflag.ResolveAllResponse.metadata:type_name -> google.protobuf.Struct
	15, // 3: featureflag.AnyFlag.object_value:type_name -> google.protobuf.Struct
	15, // 4: featureflag.AnyFlag.metadata:type_name -> google.protobuf.Struct
	15, // 5: featureflag.ResolveBooleanRequest.context:type_name -> google.protobuf.Struct
	15, // 6: featureflag.ResolveBooleanResponse.metadata:type_name -> google.protobuf.Struct
	15, // 7: featureflag.ResolveStringRequest.context:type_name -> google.protobuf.Struct
	15, // 8: featureflag.ResolveStringResponse.metadata:type_name -> google.protobuf.Struct
	15, // 9: featureflag.ResolveFloatRequest.context:type_name -> google.protobuf.Struct
	15, // 10: featureflag.ResolveFloatResponse.metadata:type_name -> google.protobuf.Struct
	15, // 11: featureflag.ResolveIntRequest.context:type_name -> google.protobuf.Struct
	15, // 12: featureflag.ResolveIntResponse.metadata:type_name -> google.protobuf.Struct
	15, // 13: featureflag.ResolveObjectRequest.context:type_name -> google.protobuf.Struct
	15, // 14: featureflag.ResolveObjectResponse.value:type_name -> google.protobuf.Struct
	15, // 15: featureflag.ResolveObjectResponse.metadata:type_name -> google.protobuf.Struct
	15, // 16: featureflag.EventStreamResponse.data:type_name -> google.protobuf.Struct
	2,  // 17: featureflag.ResolveAllResponse.FlagsEntry.value:type_name -> featureflag.AnyFlag
	0,  // 18: featureflag.FeatureFlagService.ResolveAll:input_type -> featureflag.ResolveAllRequest
	3,  // 19: featureflag.FeatureFlagService.ResolveBoolean:input_type -> featureflag.ResolveBooleanRequest
	5,  // 20: featureflag.FeatureFlagService.ResolveString:input_type -> featureflag.ResolveStringRequest
	7,  // 21: featureflag.FeatureFlagService.ResolveFloat:input_type -> featureflag.ResolveFloatRequest
	9,  // 22: featureflag.FeatureFlagService.ResolveInt:input_type -> featureflag.ResolveIntRequest
	11, // 23: featureflag.FeatureFlagService.ResolveObject:input_type -> featureflag.ResolveObjectRequest
	1,  // 24: featureflag.FeatureFlagService.ResolveAll:output_type -> featureflag.ResolveAllResponse
	4,  // 25: featureflag.FeatureFlagService.ResolveBoolean:output_type -> featureflag.ResolveBooleanResponse
	6,  // 26: featureflag.FeatureFlagService.ResolveString:output_type -> featureflag.ResolveStringResponse
	8,  // 27: featureflag.FeatureFlagService.ResolveFloat:output_type -> featureflag.ResolveFloatResponse
	10, // 28: featureflag.FeatureFlagService.ResolveInt:output_type -> featureflag.ResolveIntResponse
	12, // 29: featureflag.FeatureFlagService.ResolveObject:output_type -> featureflag.ResolveObjectResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_featureflag_featureflag_proto_init() }
func file_featureflag_featureflag_proto_init() {
	if File_featureflag_featureflag_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_featureflag_featureflag_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyFlag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveBooleanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveBooleanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveStringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveStringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveFloatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveFloatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveIntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveIntResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_featureflag_featureflag_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_featureflag_featureflag_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AnyFlag_BoolValue)(nil),
		(*AnyFlag_StringValue)(nil),
		(*AnyFlag_DoubleValue)(nil),
		(*AnyFlag_ObjectValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_featureflag_featureflag_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_featureflag_featureflag_proto_goTypes,
		DependencyIndexes: file_featureflag_featureflag_proto_depIdxs,
		MessageInfos:      file_featureflag_featureflag_proto_msgTypes,
	}.Build()
	File_featureflag_featureflag_proto = out.File
	file_featureflag_featureflag_proto_rawDesc = nil
	file_featureflag_featureflag_proto_goTypes = nil
	file_featureflag_featureflag_proto_depIdxs = nil
}
