// @generated by protoc-gen-es v2.2.1
// @generated from file policy/subjectmapping/subject_mapping.proto (package policy.subjectmapping, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Action, SubjectConditionSet, SubjectMapping, SubjectProperty, SubjectSet } from "../objects_pb";
import type { PageRequest, PageResponse } from "../selectors_pb";
import type { MetadataMutable, MetadataUpdateEnum } from "../../common/common_pb";

/**
 * Describes the file policy/subjectmapping/subject_mapping.proto.
 */
export declare const file_policy_subjectmapping_subject_mapping: GenFile;

/**
 * MatchSubjectMappingsRequest liberally returns a list of SubjectMappings based on the provided SubjectProperties.
 * The SubjectMappings are returned if an external selector field matches.
 *
 * @generated from message policy.subjectmapping.MatchSubjectMappingsRequest
 */
export declare type MatchSubjectMappingsRequest = Message<"policy.subjectmapping.MatchSubjectMappingsRequest"> & {
  /**
   * @generated from field: repeated policy.SubjectProperty subject_properties = 1;
   */
  subjectProperties: SubjectProperty[];
};

/**
 * Describes the message policy.subjectmapping.MatchSubjectMappingsRequest.
 * Use `create(MatchSubjectMappingsRequestSchema)` to create a new message.
 */
export declare const MatchSubjectMappingsRequestSchema: GenMessage<MatchSubjectMappingsRequest>;

/**
 * @generated from message policy.subjectmapping.MatchSubjectMappingsResponse
 */
export declare type MatchSubjectMappingsResponse = Message<"policy.subjectmapping.MatchSubjectMappingsResponse"> & {
  /**
   * @generated from field: repeated policy.SubjectMapping subject_mappings = 1;
   */
  subjectMappings: SubjectMapping[];
};

/**
 * Describes the message policy.subjectmapping.MatchSubjectMappingsResponse.
 * Use `create(MatchSubjectMappingsResponseSchema)` to create a new message.
 */
export declare const MatchSubjectMappingsResponseSchema: GenMessage<MatchSubjectMappingsResponse>;

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingRequest
 */
export declare type GetSubjectMappingRequest = Message<"policy.subjectmapping.GetSubjectMappingRequest"> & {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message policy.subjectmapping.GetSubjectMappingRequest.
 * Use `create(GetSubjectMappingRequestSchema)` to create a new message.
 */
export declare const GetSubjectMappingRequestSchema: GenMessage<GetSubjectMappingRequest>;

/**
 * @generated from message policy.subjectmapping.GetSubjectMappingResponse
 */
export declare type GetSubjectMappingResponse = Message<"policy.subjectmapping.GetSubjectMappingResponse"> & {
  /**
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;
};

/**
 * Describes the message policy.subjectmapping.GetSubjectMappingResponse.
 * Use `create(GetSubjectMappingResponseSchema)` to create a new message.
 */
export declare const GetSubjectMappingResponseSchema: GenMessage<GetSubjectMappingResponse>;

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsRequest
 */
export declare type ListSubjectMappingsRequest = Message<"policy.subjectmapping.ListSubjectMappingsRequest"> & {
  /**
   * Optional
   *
   * @generated from field: policy.PageRequest pagination = 10;
   */
  pagination?: PageRequest;
};

/**
 * Describes the message policy.subjectmapping.ListSubjectMappingsRequest.
 * Use `create(ListSubjectMappingsRequestSchema)` to create a new message.
 */
export declare const ListSubjectMappingsRequestSchema: GenMessage<ListSubjectMappingsRequest>;

/**
 * @generated from message policy.subjectmapping.ListSubjectMappingsResponse
 */
export declare type ListSubjectMappingsResponse = Message<"policy.subjectmapping.ListSubjectMappingsResponse"> & {
  /**
   * @generated from field: repeated policy.SubjectMapping subject_mappings = 1;
   */
  subjectMappings: SubjectMapping[];

  /**
   * @generated from field: policy.PageResponse pagination = 10;
   */
  pagination?: PageResponse;
};

/**
 * Describes the message policy.subjectmapping.ListSubjectMappingsResponse.
 * Use `create(ListSubjectMappingsResponseSchema)` to create a new message.
 */
export declare const ListSubjectMappingsResponseSchema: GenMessage<ListSubjectMappingsResponse>;

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingRequest
 */
export declare type CreateSubjectMappingRequest = Message<"policy.subjectmapping.CreateSubjectMappingRequest"> & {
  /**
   * Required
   * Attribute Value to be mapped to
   *
   * @generated from field: string attribute_value_id = 1;
   */
  attributeValueId: string;

  /**
   * Required
   * The actions permitted by subjects in this mapping
   *
   * @generated from field: repeated policy.Action actions = 2;
   */
  actions: Action[];

  /**
   * Either of the following:
   * Reuse existing SubjectConditionSet (NOTE: prioritized over new_subject_condition_set)
   *
   * @generated from field: string existing_subject_condition_set_id = 3;
   */
  existingSubjectConditionSetId: string;

  /**
   * Create new SubjectConditionSet (NOTE: ignored if existing_subject_condition_set_id is provided)
   *
   * @generated from field: policy.subjectmapping.SubjectConditionSetCreate new_subject_condition_set = 4;
   */
  newSubjectConditionSet?: SubjectConditionSetCreate;

  /**
   * Optional
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;
};

/**
 * Describes the message policy.subjectmapping.CreateSubjectMappingRequest.
 * Use `create(CreateSubjectMappingRequestSchema)` to create a new message.
 */
export declare const CreateSubjectMappingRequestSchema: GenMessage<CreateSubjectMappingRequest>;

/**
 * @generated from message policy.subjectmapping.CreateSubjectMappingResponse
 */
export declare type CreateSubjectMappingResponse = Message<"policy.subjectmapping.CreateSubjectMappingResponse"> & {
  /**
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;
};

/**
 * Describes the message policy.subjectmapping.CreateSubjectMappingResponse.
 * Use `create(CreateSubjectMappingResponseSchema)` to create a new message.
 */
export declare const CreateSubjectMappingResponseSchema: GenMessage<CreateSubjectMappingResponse>;

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingRequest
 */
export declare type UpdateSubjectMappingRequest = Message<"policy.subjectmapping.UpdateSubjectMappingRequest"> & {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Optional
   * Replaces the existing SubjectConditionSet id with a new one
   *
   * @generated from field: string subject_condition_set_id = 2;
   */
  subjectConditionSetId: string;

  /**
   * Optional
   * Replaces entire list of actions permitted by subjects
   *
   * @generated from field: repeated policy.Action actions = 3;
   */
  actions: Action[];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior: MetadataUpdateEnum;
};

/**
 * Describes the message policy.subjectmapping.UpdateSubjectMappingRequest.
 * Use `create(UpdateSubjectMappingRequestSchema)` to create a new message.
 */
export declare const UpdateSubjectMappingRequestSchema: GenMessage<UpdateSubjectMappingRequest>;

/**
 * @generated from message policy.subjectmapping.UpdateSubjectMappingResponse
 */
export declare type UpdateSubjectMappingResponse = Message<"policy.subjectmapping.UpdateSubjectMappingResponse"> & {
  /**
   * Only ID of the updated Subject Mapping provided
   *
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;
};

/**
 * Describes the message policy.subjectmapping.UpdateSubjectMappingResponse.
 * Use `create(UpdateSubjectMappingResponseSchema)` to create a new message.
 */
export declare const UpdateSubjectMappingResponseSchema: GenMessage<UpdateSubjectMappingResponse>;

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingRequest
 */
export declare type DeleteSubjectMappingRequest = Message<"policy.subjectmapping.DeleteSubjectMappingRequest"> & {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message policy.subjectmapping.DeleteSubjectMappingRequest.
 * Use `create(DeleteSubjectMappingRequestSchema)` to create a new message.
 */
export declare const DeleteSubjectMappingRequestSchema: GenMessage<DeleteSubjectMappingRequest>;

/**
 * @generated from message policy.subjectmapping.DeleteSubjectMappingResponse
 */
export declare type DeleteSubjectMappingResponse = Message<"policy.subjectmapping.DeleteSubjectMappingResponse"> & {
  /**
   * Only ID of the updated Subject Mapping provided
   *
   * @generated from field: policy.SubjectMapping subject_mapping = 1;
   */
  subjectMapping?: SubjectMapping;
};

/**
 * Describes the message policy.subjectmapping.DeleteSubjectMappingResponse.
 * Use `create(DeleteSubjectMappingResponseSchema)` to create a new message.
 */
export declare const DeleteSubjectMappingResponseSchema: GenMessage<DeleteSubjectMappingResponse>;

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetRequest
 */
export declare type GetSubjectConditionSetRequest = Message<"policy.subjectmapping.GetSubjectConditionSetRequest"> & {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message policy.subjectmapping.GetSubjectConditionSetRequest.
 * Use `create(GetSubjectConditionSetRequestSchema)` to create a new message.
 */
export declare const GetSubjectConditionSetRequestSchema: GenMessage<GetSubjectConditionSetRequest>;

/**
 * @generated from message policy.subjectmapping.GetSubjectConditionSetResponse
 */
export declare type GetSubjectConditionSetResponse = Message<"policy.subjectmapping.GetSubjectConditionSetResponse"> & {
  /**
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;

  /**
   * contextualized Subject Mappings associated with this SubjectConditionSet
   *
   * @generated from field: repeated policy.SubjectMapping associated_subject_mappings = 2;
   */
  associatedSubjectMappings: SubjectMapping[];
};

/**
 * Describes the message policy.subjectmapping.GetSubjectConditionSetResponse.
 * Use `create(GetSubjectConditionSetResponseSchema)` to create a new message.
 */
export declare const GetSubjectConditionSetResponseSchema: GenMessage<GetSubjectConditionSetResponse>;

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsRequest
 */
export declare type ListSubjectConditionSetsRequest = Message<"policy.subjectmapping.ListSubjectConditionSetsRequest"> & {
  /**
   * Optional
   *
   * @generated from field: policy.PageRequest pagination = 10;
   */
  pagination?: PageRequest;
};

/**
 * Describes the message policy.subjectmapping.ListSubjectConditionSetsRequest.
 * Use `create(ListSubjectConditionSetsRequestSchema)` to create a new message.
 */
export declare const ListSubjectConditionSetsRequestSchema: GenMessage<ListSubjectConditionSetsRequest>;

/**
 * @generated from message policy.subjectmapping.ListSubjectConditionSetsResponse
 */
export declare type ListSubjectConditionSetsResponse = Message<"policy.subjectmapping.ListSubjectConditionSetsResponse"> & {
  /**
   * @generated from field: repeated policy.SubjectConditionSet subject_condition_sets = 1;
   */
  subjectConditionSets: SubjectConditionSet[];

  /**
   * @generated from field: policy.PageResponse pagination = 10;
   */
  pagination?: PageResponse;
};

/**
 * Describes the message policy.subjectmapping.ListSubjectConditionSetsResponse.
 * Use `create(ListSubjectConditionSetsResponseSchema)` to create a new message.
 */
export declare const ListSubjectConditionSetsResponseSchema: GenMessage<ListSubjectConditionSetsResponse>;

/**
 * @generated from message policy.subjectmapping.SubjectConditionSetCreate
 */
export declare type SubjectConditionSetCreate = Message<"policy.subjectmapping.SubjectConditionSetCreate"> & {
  /**
   * Required
   *
   * @generated from field: repeated policy.SubjectSet subject_sets = 1;
   */
  subjectSets: SubjectSet[];

  /**
   * Optional
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;
};

/**
 * Describes the message policy.subjectmapping.SubjectConditionSetCreate.
 * Use `create(SubjectConditionSetCreateSchema)` to create a new message.
 */
export declare const SubjectConditionSetCreateSchema: GenMessage<SubjectConditionSetCreate>;

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetRequest
 */
export declare type CreateSubjectConditionSetRequest = Message<"policy.subjectmapping.CreateSubjectConditionSetRequest"> & {
  /**
   * @generated from field: policy.subjectmapping.SubjectConditionSetCreate subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSetCreate;
};

/**
 * Describes the message policy.subjectmapping.CreateSubjectConditionSetRequest.
 * Use `create(CreateSubjectConditionSetRequestSchema)` to create a new message.
 */
export declare const CreateSubjectConditionSetRequestSchema: GenMessage<CreateSubjectConditionSetRequest>;

/**
 * @generated from message policy.subjectmapping.CreateSubjectConditionSetResponse
 */
export declare type CreateSubjectConditionSetResponse = Message<"policy.subjectmapping.CreateSubjectConditionSetResponse"> & {
  /**
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;
};

/**
 * Describes the message policy.subjectmapping.CreateSubjectConditionSetResponse.
 * Use `create(CreateSubjectConditionSetResponseSchema)` to create a new message.
 */
export declare const CreateSubjectConditionSetResponseSchema: GenMessage<CreateSubjectConditionSetResponse>;

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetRequest
 */
export declare type UpdateSubjectConditionSetRequest = Message<"policy.subjectmapping.UpdateSubjectConditionSetRequest"> & {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Optional
   * If provided, replaces entire existing structure of Subject Sets, Condition Groups, & Conditions
   *
   * @generated from field: repeated policy.SubjectSet subject_sets = 2;
   */
  subjectSets: SubjectSet[];

  /**
   * Common metadata
   *
   * @generated from field: common.MetadataMutable metadata = 100;
   */
  metadata?: MetadataMutable;

  /**
   * @generated from field: common.MetadataUpdateEnum metadata_update_behavior = 101;
   */
  metadataUpdateBehavior: MetadataUpdateEnum;
};

/**
 * Describes the message policy.subjectmapping.UpdateSubjectConditionSetRequest.
 * Use `create(UpdateSubjectConditionSetRequestSchema)` to create a new message.
 */
export declare const UpdateSubjectConditionSetRequestSchema: GenMessage<UpdateSubjectConditionSetRequest>;

/**
 * @generated from message policy.subjectmapping.UpdateSubjectConditionSetResponse
 */
export declare type UpdateSubjectConditionSetResponse = Message<"policy.subjectmapping.UpdateSubjectConditionSetResponse"> & {
  /**
   * Only ID of updated Subject Condition Set provided
   *
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;
};

/**
 * Describes the message policy.subjectmapping.UpdateSubjectConditionSetResponse.
 * Use `create(UpdateSubjectConditionSetResponseSchema)` to create a new message.
 */
export declare const UpdateSubjectConditionSetResponseSchema: GenMessage<UpdateSubjectConditionSetResponse>;

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetRequest
 */
export declare type DeleteSubjectConditionSetRequest = Message<"policy.subjectmapping.DeleteSubjectConditionSetRequest"> & {
  /**
   * Required
   *
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message policy.subjectmapping.DeleteSubjectConditionSetRequest.
 * Use `create(DeleteSubjectConditionSetRequestSchema)` to create a new message.
 */
export declare const DeleteSubjectConditionSetRequestSchema: GenMessage<DeleteSubjectConditionSetRequest>;

/**
 * @generated from message policy.subjectmapping.DeleteSubjectConditionSetResponse
 */
export declare type DeleteSubjectConditionSetResponse = Message<"policy.subjectmapping.DeleteSubjectConditionSetResponse"> & {
  /**
   * Only ID of deleted Subject Condition Set provided
   *
   * @generated from field: policy.SubjectConditionSet subject_condition_set = 1;
   */
  subjectConditionSet?: SubjectConditionSet;
};

/**
 * Describes the message policy.subjectmapping.DeleteSubjectConditionSetResponse.
 * Use `create(DeleteSubjectConditionSetResponseSchema)` to create a new message.
 */
export declare const DeleteSubjectConditionSetResponseSchema: GenMessage<DeleteSubjectConditionSetResponse>;

/**
 * Prune any Subject Condition Sets not utilized within a Subject Mapping
 *
 * @generated from message policy.subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest
 */
export declare type DeleteAllUnmappedSubjectConditionSetsRequest = Message<"policy.subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest"> & {
};

/**
 * Describes the message policy.subjectmapping.DeleteAllUnmappedSubjectConditionSetsRequest.
 * Use `create(DeleteAllUnmappedSubjectConditionSetsRequestSchema)` to create a new message.
 */
export declare const DeleteAllUnmappedSubjectConditionSetsRequestSchema: GenMessage<DeleteAllUnmappedSubjectConditionSetsRequest>;

/**
 * @generated from message policy.subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse
 */
export declare type DeleteAllUnmappedSubjectConditionSetsResponse = Message<"policy.subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse"> & {
  /**
   * Only IDs of any deleted Subject Condition Set provided
   *
   * @generated from field: repeated policy.SubjectConditionSet subject_condition_sets = 1;
   */
  subjectConditionSets: SubjectConditionSet[];
};

/**
 * Describes the message policy.subjectmapping.DeleteAllUnmappedSubjectConditionSetsResponse.
 * Use `create(DeleteAllUnmappedSubjectConditionSetsResponseSchema)` to create a new message.
 */
export declare const DeleteAllUnmappedSubjectConditionSetsResponseSchema: GenMessage<DeleteAllUnmappedSubjectConditionSetsResponse>;

/**
 * @generated from service policy.subjectmapping.SubjectMappingService
 */
export declare const SubjectMappingService: GenService<{
  /**
   * Find matching Subject Mappings for a given Subject
   *
   * @generated from rpc policy.subjectmapping.SubjectMappingService.MatchSubjectMappings
   */
  matchSubjectMappings: {
    methodKind: "unary";
    input: typeof MatchSubjectMappingsRequestSchema;
    output: typeof MatchSubjectMappingsResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.ListSubjectMappings
   */
  listSubjectMappings: {
    methodKind: "unary";
    input: typeof ListSubjectMappingsRequestSchema;
    output: typeof ListSubjectMappingsResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.GetSubjectMapping
   */
  getSubjectMapping: {
    methodKind: "unary";
    input: typeof GetSubjectMappingRequestSchema;
    output: typeof GetSubjectMappingResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.CreateSubjectMapping
   */
  createSubjectMapping: {
    methodKind: "unary";
    input: typeof CreateSubjectMappingRequestSchema;
    output: typeof CreateSubjectMappingResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.UpdateSubjectMapping
   */
  updateSubjectMapping: {
    methodKind: "unary";
    input: typeof UpdateSubjectMappingRequestSchema;
    output: typeof UpdateSubjectMappingResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.DeleteSubjectMapping
   */
  deleteSubjectMapping: {
    methodKind: "unary";
    input: typeof DeleteSubjectMappingRequestSchema;
    output: typeof DeleteSubjectMappingResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.ListSubjectConditionSets
   */
  listSubjectConditionSets: {
    methodKind: "unary";
    input: typeof ListSubjectConditionSetsRequestSchema;
    output: typeof ListSubjectConditionSetsResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.GetSubjectConditionSet
   */
  getSubjectConditionSet: {
    methodKind: "unary";
    input: typeof GetSubjectConditionSetRequestSchema;
    output: typeof GetSubjectConditionSetResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.CreateSubjectConditionSet
   */
  createSubjectConditionSet: {
    methodKind: "unary";
    input: typeof CreateSubjectConditionSetRequestSchema;
    output: typeof CreateSubjectConditionSetResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.UpdateSubjectConditionSet
   */
  updateSubjectConditionSet: {
    methodKind: "unary";
    input: typeof UpdateSubjectConditionSetRequestSchema;
    output: typeof UpdateSubjectConditionSetResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.DeleteSubjectConditionSet
   */
  deleteSubjectConditionSet: {
    methodKind: "unary";
    input: typeof DeleteSubjectConditionSetRequestSchema;
    output: typeof DeleteSubjectConditionSetResponseSchema;
  },
  /**
   * @generated from rpc policy.subjectmapping.SubjectMappingService.DeleteAllUnmappedSubjectConditionSets
   */
  deleteAllUnmappedSubjectConditionSets: {
    methodKind: "unary";
    input: typeof DeleteAllUnmappedSubjectConditionSetsRequestSchema;
    output: typeof DeleteAllUnmappedSubjectConditionSetsResponseSchema;
  },
}>;

