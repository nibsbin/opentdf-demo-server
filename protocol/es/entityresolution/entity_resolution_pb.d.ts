// @generated by protoc-gen-es v2.2.1
// @generated from file entityresolution/entity_resolution.proto (package entityresolution, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { JsonObject, Message } from "@bufbuild/protobuf";
import type { Entity, EntityChain, Token } from "../authorization/authorization_pb";
import type { Any } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file entityresolution/entity_resolution.proto.
 */
export declare const file_entityresolution_entity_resolution: GenFile;

/**
 *
 * Example: Get idp attributes for bob and alice (both represented using an email address
 * {
 * "entities": [
 * {
 * "id": "e1",
 * "emailAddress": "bob@example.org"
 * },
 * {
 * "id": "e2",
 * "emailAddress": "alice@example.org"
 * }
 * ]
 * }
 *
 *
 * @generated from message entityresolution.ResolveEntitiesRequest
 */
export declare type ResolveEntitiesRequest = Message<"entityresolution.ResolveEntitiesRequest"> & {
  /**
   * @generated from field: repeated authorization.Entity entities = 1;
   */
  entities: Entity[];
};

/**
 * Describes the message entityresolution.ResolveEntitiesRequest.
 * Use `create(ResolveEntitiesRequestSchema)` to create a new message.
 */
export declare const ResolveEntitiesRequestSchema: GenMessage<ResolveEntitiesRequest>;

/**
 * @generated from message entityresolution.EntityRepresentation
 */
export declare type EntityRepresentation = Message<"entityresolution.EntityRepresentation"> & {
  /**
   * @generated from field: repeated google.protobuf.Struct additional_props = 1;
   */
  additionalProps: JsonObject[];

  /**
   * ephemeral entity id from the request
   *
   * @generated from field: string original_id = 2;
   */
  originalId: string;
};

/**
 * Describes the message entityresolution.EntityRepresentation.
 * Use `create(EntityRepresentationSchema)` to create a new message.
 */
export declare const EntityRepresentationSchema: GenMessage<EntityRepresentation>;

/**
 *
 * Example: Get idp attributes for bob and alice
 * {
 * "entity_representations": [
 * {
 * "idp_entity_id": "e1",
 * "additional_props": {"someAttr1":"someValue1"}
 * },
 * {
 * "idp_entity_id": "e2",
 * "additional_props": {"someAttr2":"someValue2"}
 * }
 * ]
 * }
 *
 *
 * @generated from message entityresolution.ResolveEntitiesResponse
 */
export declare type ResolveEntitiesResponse = Message<"entityresolution.ResolveEntitiesResponse"> & {
  /**
   * @generated from field: repeated entityresolution.EntityRepresentation entity_representations = 1;
   */
  entityRepresentations: EntityRepresentation[];
};

/**
 * Describes the message entityresolution.ResolveEntitiesResponse.
 * Use `create(ResolveEntitiesResponseSchema)` to create a new message.
 */
export declare const ResolveEntitiesResponseSchema: GenMessage<ResolveEntitiesResponse>;

/**
 * @generated from message entityresolution.EntityNotFoundError
 */
export declare type EntityNotFoundError = Message<"entityresolution.EntityNotFoundError"> & {
  /**
   * @generated from field: int32 code = 1;
   */
  code: number;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: repeated google.protobuf.Any details = 3;
   */
  details: Any[];

  /**
   * @generated from field: string entity = 4;
   */
  entity: string;
};

/**
 * Describes the message entityresolution.EntityNotFoundError.
 * Use `create(EntityNotFoundErrorSchema)` to create a new message.
 */
export declare const EntityNotFoundErrorSchema: GenMessage<EntityNotFoundError>;

/**
 *
 * Example: Get Entity chains for tokens aaaaaa and bbbbbb
 * {
 * "tokens": [
 * "aaaaaaa",
 * "bbbbbbbb"
 * ]
 * }
 *
 *
 * @generated from message entityresolution.CreateEntityChainFromJwtRequest
 */
export declare type CreateEntityChainFromJwtRequest = Message<"entityresolution.CreateEntityChainFromJwtRequest"> & {
  /**
   * @generated from field: repeated authorization.Token tokens = 1;
   */
  tokens: Token[];
};

/**
 * Describes the message entityresolution.CreateEntityChainFromJwtRequest.
 * Use `create(CreateEntityChainFromJwtRequestSchema)` to create a new message.
 */
export declare const CreateEntityChainFromJwtRequestSchema: GenMessage<CreateEntityChainFromJwtRequest>;

/**
 *
 * Example: Return the entity chains from the provided tokens
 * {
 * "entity_chains": [
 * {
 * "id": "tok1",
 * "entities": [
 * {
 * "clientId": "client1"
 * }
 * ]
 * },
 * {
 * "id": "tok2",
 * "entities": [
 * {
 * "userName": "alice",
 * "clientId": "client2"
 * }
 * ]
 * }
 * ]
 * }
 *
 *
 * @generated from message entityresolution.CreateEntityChainFromJwtResponse
 */
export declare type CreateEntityChainFromJwtResponse = Message<"entityresolution.CreateEntityChainFromJwtResponse"> & {
  /**
   * @generated from field: repeated authorization.EntityChain entity_chains = 1;
   */
  entityChains: EntityChain[];
};

/**
 * Describes the message entityresolution.CreateEntityChainFromJwtResponse.
 * Use `create(CreateEntityChainFromJwtResponseSchema)` to create a new message.
 */
export declare const CreateEntityChainFromJwtResponseSchema: GenMessage<CreateEntityChainFromJwtResponse>;

/**
 * @generated from service entityresolution.EntityResolutionService
 */
export declare const EntityResolutionService: GenService<{
  /**
   * @generated from rpc entityresolution.EntityResolutionService.ResolveEntities
   */
  resolveEntities: {
    methodKind: "unary";
    input: typeof ResolveEntitiesRequestSchema;
    output: typeof ResolveEntitiesResponseSchema;
  },
  /**
   * @generated from rpc entityresolution.EntityResolutionService.CreateEntityChainFromJwt
   */
  createEntityChainFromJwt: {
    methodKind: "unary";
    input: typeof CreateEntityChainFromJwtRequestSchema;
    output: typeof CreateEntityChainFromJwtResponseSchema;
  },
}>;

