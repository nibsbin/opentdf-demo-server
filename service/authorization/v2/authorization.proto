syntax = "proto3";

package authorization.v2;

import "google/protobuf/any.proto";
import "policy/objects.proto";

message Token {
  // ephemeral id for tracking between request and response
  string ephemeral_id = 1;
  // access token
  string jwt = 2;
}

// PE (Person Entity) or NPE (Non-Person Entity)
message Entity {
  // ephemeral id for tracking between request and response
  string ephemeral_id = 1;
  // Standard entity types supported by the platform
  oneof entity_type {
    // one of the entity options must be set
    string email_address = 2;
    string user_name = 3;
    string remote_claims_url = 4;
    string uuid = 5;
    google.protobuf.Any claims = 6;
    EntityCustom custom = 7;
    string client_id = 8;
    string registered_resource_value_fqn = 10;
  }
  enum Category {
    CATEGORY_UNSPECIFIED = 0;
    CATEGORY_SUBJECT = 1;
    CATEGORY_ENVIRONMENT = 2;
  }
  Category category = 9;
}

// Entity type for custom entities beyond the standard types
message EntityCustom {
  google.protobuf.Any extension = 1;
}

// A set of related PE and NPE
message EntityChain {
  // ephemeral id for tracking between request and response
  string ephemeral_id = 1;
  repeated Entity entities = 2;
}

// Can the entity (PE or NPE) represented by each entity chain take the provided action on the set of resources
message DecisionRequest {
  EntityChain entity = 1;
  policy.Action action = 2;
  Resource resource = 3;
}

message DecisionResponse {
  enum Decision {
    DECISION_UNSPECIFIED = 0;
    DECISION_DENY = 1;
    DECISION_PERMIT = 2;
    // DECISION_OBLIGATED = 3;
  }
  // ephemeral id for tracking between request and response
  string ephemeral_entity_chain_id = 1;
  // ephemeral id for tracking between request and response
  string ephemeral_resource_id = 2;
  // action that was requested
  policy.Action action = 3;
  // the decision response
  Decision decision = 4;
  // optional list of obligations represented in URI format
  // repeated string obligations = 5;
}

message GetDecisionRequest {
  DecisionRequest decision_request = 1;
}
message GetDecisionResponse {
  DecisionResponse decision_response = 1;
}

// More performant bulk request for multiple decisions
message BulkGetDecisionsRequest {
  repeated DecisionRequest decision_requests = 1;
}
message BulkGetDecisionsResponse {
  repeated DecisionResponse decision_responses = 1;
}

message GetEntitlementsRequest {
  // list of requested entities
  // todo: should this be an entity chain?
  repeated Entity entities = 1;
  // optional resource as a scope
  optional Resource scope = 2;
  // optional parameter to return a full list of entitlements - returns lower hierarchy attributes
  optional bool with_comprehensive_hierarchy = 3;
}

// Entitlements for a given entity, mapping each attribute value FQN to any entitled actions[]
message EntityEntitlements {
  message ActionsList {
    repeated policy.Action actions = 1;
  }

  string entity_id = 1;
  map<string, ActionsList> actions_per_attribute_value_fqn = 2;
}

// Either a registered resource or a set of attribute values
message Resource {
  // ephemeral id for tracking between request and response
  string ephemeral_id = 1;

  message AttributeValues {
    repeated string fqns = 1;
  }

  oneof resource {
    AttributeValues attribute_values = 2;
    string registered_resource_value_fqn = 3;
  }
}

message GetEntitlementsResponse {
  repeated EntityEntitlements entitlements = 1;
}

// Can the entity (PE or NPE) represented by this token take the provided action on the set of resources
message TokenDecisionRequest {
  Token token = 1;
  policy.Action action = 2;
  Resource resource = 3;
}

message GetDecisionByTokenRequest {
  TokenDecisionRequest decision_request = 1;
}
message GetDecisionByTokenResponse {
  DecisionResponse decision_response = 1;
}

// More performant bulk request for multiple decisions
message BulkGetDecisionsByTokenRequest {
  repeated TokenDecisionRequest decision_requests = 1;
}
message BulkGetDecisionsByTokenResponse {
  repeated DecisionResponse decision_responses = 1;
}

service AuthorizationService {
  rpc GetDecision(GetDecisionRequest) returns (GetDecisionResponse) {}
  rpc BulkGetDecisions(BulkGetDecisionsRequest) returns (BulkGetDecisionsResponse) {}

  rpc BulkGetDecisionsByToken(BulkGetDecisionsByTokenRequest) returns (BulkGetDecisionsByTokenResponse) {}
  rpc GetDecisionByToken(GetDecisionByTokenRequest) returns (GetDecisionByTokenResponse) {}

  rpc GetEntitlements(GetEntitlementsRequest) returns (GetEntitlementsResponse) {}
}
