syntax = "proto3";

package authorization.v2;

import "authorization/authorization.proto";
import "buf/validate/validate.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "policy/objects.proto";

enum Decision {
  DECISION_UNSPECIFIED = 0;
  DECISION_DENY = 1;
  DECISION_PERMIT = 2;
  // DECISION_OBLIGATED = 3;
}

// A set of related PE and NPE
message EntityChain {
  // ephemeral id for tracking between request and response
  string ephemeral_chain_id = 1;
  repeated Entity entities = 2 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated = {min_items: 1}
  ];
}

// PE (Person Entity) or NPE (Non-Person Entity)
message Entity {
  // ephemeral id for tracking between request and response
  string ephemeral_id = 1;
  // Standard entity types supported by the platform
  oneof entity_type {
    // one of the entity options must be set
    string email_address = 2;
    string user_name = 3;
    // used by ERS claims mode
    google.protobuf.Any claims = 4;
    // EntityCustom custom = 5;
    string client_id = 6;
    string registered_resource_value_fqn = 7;
  }
  enum Category {
    CATEGORY_UNSPECIFIED = 0;
    CATEGORY_SUBJECT = 1;
    CATEGORY_ENVIRONMENT = 2;
  }
  Category category = 9;
}

// Entitlements for a given entity, mapping each attribute value FQN to any entitled actions[]
message EntityEntitlements {
  message ActionsList {
    repeated policy.Action actions = 1;
  }

  // ephemeral id for tracking between request and response
  string ephemeral_id = 1;
  map<string, ActionsList> actions_per_attribute_value_fqn = 2;
}

// Either a set of attribute values (such as those on a TDF) or a registered resource value
message Resource {
  // ephemeral id for tracking between request and response
  string ephemeral_id = 1;

  message AttributeValues {
    repeated string fqns = 1;
  }

  oneof resource {
    AttributeValues attribute_values = 2;
    string registered_resource_value_fqn = 3;
  }
}

message ResourceDecision {
  // ephemeral id for tracking between request and response
  string ephemeral_resource_id = 1;
  // decision result
  Decision decision = 3;
}

// Can the entity (PE or NPE) access?
// 1. one entity chain
// 2. one action
// 3. one resource
message GetDecisionRequest {
  EntityChain entity = 1 [(buf.validate.field).required = true];
  // name on action is required
  policy.Action action = 2 [(buf.validate.field).required = true];
  Resource resource = 3 [(buf.validate.field).required = true];

  option (buf.validate.message).cel = {
    id: "get_decision_request.action_name_required"
    message: "action.name must be provided"
    expression: "has(this.action.name)"
  };
}
message GetDecisionResponse {
  // decision on the resource
  ResourceDecision decision = 1;
  // optional list of obligations represented in URI format
  // repeated string obligations = 2;
}

// Can the entity (PE or NPE) access?
// 1. one entity chain
// 2. one action
// 3. multiple resources
// Note: this is a more performant bulk request for multiple resource decisions
message GetDecisionMultiResourceRequest {
  // entity chain must be defined
  EntityChain entity = 1 [(buf.validate.field).required = true];
  // name on action is required
  policy.Action action = 2 [(buf.validate.field).required = true];
  repeated Resource resources = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated = {min_items: 1}
  ];

  option (buf.validate.message).cel = {
    id: "get_decision_multi_request.action_name_required"
    message: "action.name must be provided"
    expression: "has(this.action.name)"
  };
}
message GetDecisionMultiResourceResponse {
  // convenience flag indicating global resource decisions result (permit/deny)
  google.protobuf.BoolValue all_permitted = 1;
  // individual resource decisions
  repeated ResourceDecision resource_decisions = 2;
}

// Can the entities (PE or NPE) access?
// 1. Multiplexing of a Decision<entityChain, Action, repeated Resource> request
// This is a more performant bulk request for complex decisioning (multiple entity chains or actions on
// multiple resource decisions)
message GetDecisionBulkRequest {
  repeated GetDecisionMultiResourceRequest decision_requests = 1;
}
message GetDecisionBulkResponse {
  repeated GetDecisionMultiResourceResponse decision_responses = 1;
}

// What can the entity (PE or NPE, represented by the entity chain) do, broken down as permitted actions on attribute value FQNs?
//
// Note: the v1 API parameter 'scope' has been dropped, and it is recommended to use
// GetDecision if the resource is known
message GetEntitlementsRequest {
  EntityChain entity_chain = 1 [(buf.validate.field).required = true];
  // optional parameter to return all entitled values for attribute definitions with hierarchy rules, propagating
  // down the hierarchical values instead of returning solely the value that is directly entitled
  optional bool with_comprehensive_hierarchy = 2;
}
message GetEntitlementsResponse {
  repeated EntityEntitlements entitlements = 1;
}

// What can the entity (PE or NPE, represented by the token) do, broken down as permitted actions on attribute value FQNs?
message GetEntitlementsByTokenRequest {
  authorization.Token token = 1 [(buf.validate.field).required = true];
  // optional parameter to return all entitled values for attribute definitions with hierarchy rules, propagating
  // down the hierarchical values instead of returning solely the value that is directly entitled
  optional bool with_comprehensive_hierarchy = 2;
}
message GetEntitlementsByTokenResponse {
  repeated EntityEntitlements entitlements = 1;
}

// Can the entity (PE or NPE) represented by this token access?
// 1. one token
// 2. one action
// 3. one resource
message GetDecisionByTokenRequest {
  authorization.Token token = 1 [(buf.validate.field).required = true];
  // name on action is required
  policy.Action action = 2 [(buf.validate.field).required = true];
  Resource resource = 3 [(buf.validate.field).required = true];

  option (buf.validate.message).cel = {
    id: "token_decision_request.action_name_required"
    message: "action.name must be provided"
    expression: "has(this.action.name)"
  };
}
message GetDecisionByTokenResponse {
  GetDecisionResponse decision_response = 1;
}

// Can the entity (PE or NPE) represented by this token access?
// 1. one token
// 2. one action
// 3. multiple resource
message GetDecisionByTokenMultiResourceRequest {
  authorization.Token token = 1 [(buf.validate.field).required = true];
  // name on action is required
  policy.Action action = 2 [(buf.validate.field).required = true];
  repeated Resource resources = 3 [
    (buf.validate.field).required = true,
    (buf.validate.field).repeated = {min_items: 1}
  ];

  option (buf.validate.message).cel = {
    id: "token_decision_multi_resource_request.action_name_required"
    message: "action.name must be provided"
    expression: "has(this.action.name)"
  };
}
message GetDecisionByTokenMultiResourceResponse {
  // convenience flag indicating global resource decisions result (permit/deny)
  google.protobuf.BoolValue all_permitted = 1;
  // individual resource decisions
  repeated ResourceDecision resource_decisions = 2;
}

service AuthorizationService {
  rpc GetDecision(GetDecisionRequest) returns (GetDecisionResponse) {}
  rpc GetDecisionMultiResource(GetDecisionMultiResourceRequest) returns (GetDecisionMultiResourceResponse) {}
  rpc GetDecisionBulk(GetDecisionBulkRequest) returns (GetDecisionBulkResponse) {}

  rpc GetDecisionByToken(GetDecisionByTokenRequest) returns (GetDecisionByTokenResponse) {}
  rpc GetDecisionByTokenMultiResource(GetDecisionByTokenMultiResourceRequest) returns (GetDecisionByTokenMultiResourceResponse) {}

  rpc GetEntitlements(GetEntitlementsRequest) returns (GetEntitlementsResponse) {}
  rpc GetEntitlementsByToken(GetEntitlementsByTokenRequest) returns (GetEntitlementsByTokenResponse) {}
}
