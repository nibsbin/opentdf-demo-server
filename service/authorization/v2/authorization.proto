syntax = "proto3";

package authorization.v2;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "policy/objects.proto";

message Token {
  string id = 1; // ephemeral id for tracking between request and response
  string jwt = 2; // the token
}

// PE (Person Entity) or NPE (Non-Person Entity)
message Entity {
  string id = 1; // ephemeral id for tracking between request and response
  // Standard entity types supported by the platform
  oneof entity_type {
    // one of the entity options must be set
    string email_address = 2;
    string user_name = 3;
    string remote_claims_url = 4;
    string uuid = 5;
    google.protobuf.Any claims = 6;
    EntityCustom custom = 7;
    string client_id = 8;
    // FQN or URN (when supported)
    string registered_resource_identifier = 10;
  }
  enum Category {
    CATEGORY_UNSPECIFIED = 0;
    CATEGORY_SUBJECT = 1;
    CATEGORY_ENVIRONMENT = 2;
  }
  Category category = 9;
}

// Entity type for custom entities beyond the standard types
message EntityCustom {
  google.protobuf.Any extension = 1;
}

// A set of related PE and NPE
message EntityChain {
  string id = 1; // ephemeral id for tracking between request and response
  repeated Entity entities = 2;
}

// Can the entity (PE or NPE) represented by each entity chain take the provided actions on the set of resources
message DecisionRequest {
  repeated policy.Action actions = 1;
  repeated EntityChain entity_chains = 2;
  repeated Resource resource_attributes = 3;
}

message DecisionResponse {
  enum Decision {
    DECISION_UNSPECIFIED = 0;
    DECISION_DENY = 1;
    DECISION_PERMIT = 2;
  }
  string entity_chain_id = 1; // ephemeral entity chain id from the request
  string resource_attributes_id = 2; // ephemeral resource attributes id from the request
  policy.Action action = 3; // Action of the decision response
  Decision decision = 4; // The decision response
  repeated string obligations = 5; //optional list of obligations represented in URI format
}

message GetDecisionsRequest {
  repeated DecisionRequest decision_requests = 1;
}

message GetDecisionsResponse {
  repeated DecisionResponse decision_responses = 1;
}

message GetEntitlementsRequest {
  // list of requested entities
  repeated Entity entities = 1;
  // optional attribute fqn as a scope
  optional Resource scope = 2;
  // optional parameter to return a full list of entitlements - returns lower hierarchy attributes
  optional bool with_comprehensive_hierarchy = 3;
}

// Entitlements for a given entity, mapping each attribute value FQN to any entitled actions[]
message EntityEntitlements {
  message ActionsList {
    repeated policy.Action actions = 1;
  }

  string entity_id = 1;
  map<string, ActionsList> actions_per_attribute_value_fqn = 2;
}

// A logical bucket of attributes belonging to a "Resource"
message Resource {
  string ephemeral_id = 1;

  message AttributeValues {
    repeated string fqn = 1;
  }
  message RegisteredResources {
    // FQN or URN (when supported)
    repeated string identifier = 1;
  }

  oneof resource {
    AttributeValues attribute_values = 2;
    RegisteredResources registered_resources = 3;
  }
}

message GetEntitlementsResponse {
  repeated EntityEntitlements entitlements = 1;
}

message TokenDecisionRequest {
  repeated policy.Action actions = 1;
  repeated Token tokens = 2;
  repeated Resource resource_attributes = 3;
}

message GetDecisionsByTokenRequest {
  repeated TokenDecisionRequest decision_requests = 1;
}

message GetDecisionsByTokenResponse {
  repeated DecisionResponse decision_responses = 1;
}

service AuthorizationService {
  rpc GetDecisions(GetDecisionsRequest) returns (GetDecisionsResponse) {
    option (google.api.http) = {
      post: "/v1/authorization"
      body: "*"
    };
  }
  rpc GetDecisionsByToken(GetDecisionsByTokenRequest) returns (GetDecisionsByTokenResponse) {
    option (google.api.http) = {post: "/v1/token/authorization"};
  }
  rpc GetEntitlements(GetEntitlementsRequest) returns (GetEntitlementsResponse) {}
}
